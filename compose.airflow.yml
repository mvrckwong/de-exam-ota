name: airflow

x-airflow-common:
    &airflow-common
    build:
        context: ./.devcontainer
        dockerfile: Dockerfile.airflow
    environment:
      &airflow-common-env
      AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
      
      # Core Settings
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://api-server:8080/execution/'
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      
      # API Settings
      AIRFLOW__API__HOST: '0.0.0.0'
      AIRFLOW__API__PORT: '8080'
      
      # Database Settings
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow

      # Celery Settings
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      
      # Scheduler Settings
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'

      # Webserver Settings
      AIRFLOW__WEBSERVER__SECRET_KEY: 'aB3dF9kL2mN8pQ5rS7tV0wX4yZ6cE1gH3jK5nM7pR9sT2vW4xY6zA8bD0eF2gH4j'
      AIRFLOW__WEBSERVER__BASE_URL: 'http://192.168.1.105:8080'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'false'
      
      # CRITICAL: Use Redis for sessions (shared across workers)
      AIRFLOW__WEBSERVER__SESSION_BACKEND: 'redis'
      AIRFLOW__WEBSERVER__SESSION_REDIS_URL: 'redis://:@redis:6379/2'
      
      # Cookie Settings - Relaxed for troubleshooting
      AIRFLOW__WEBSERVER__COOKIE_SECURE: 'false'
      AIRFLOW__WEBSERVER__COOKIE_SAMESITE: 'Lax'
      
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.default'
      AIRFLOW__WEBSERVER__AUTHENTICATE: 'false'
      
      # Proxy Settings
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: 'true'
      
      # FAB Settings
      AIRFLOW__FAB__UPDATE_FAB_PERMS: 'true'
      
      HOST_IP: ${HOST_IP:-host.docker.internal}

    volumes:
        - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
        - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
        - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
        - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    user: 
        "${AIRFLOW_UID:-50000}:0"
    depends_on:
        &airflow-common-depends-on
        redis:
            condition: service_healthy
        postgres:
            condition: service_healthy
    networks:
        - airflow-network
        - shared-airflow-network

services:
    postgres:
        image: postgres:13
        environment:
            POSTGRES_USER: ${POSTGRES_USER:-airflow}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
            POSTGRES_DB: ${POSTGRES_DB:-airflow}
        volumes:
            - postgres-db-volume:/var/lib/postgresql/data
        healthcheck:
          test: ["CMD", "pg_isready", "-U", "airflow"]
          interval: 10s
          retries: 5
          start_period: 5s
        restart: always
        networks:
            - shared-db-network
            - airflow-network

    redis:
        image: redis:7.2-bookworm
        ports:
          - "6379:6379"
        healthcheck:
          test: ["CMD", "redis-cli", "ping"]
          interval: 10s
          timeout: 30s
          retries: 50
          start_period: 30s
        restart: always
        networks:
            - airflow-network

    api-server:
        <<: *airflow-common
        # CRITICAL: Override command to use single worker for testing
        command: ["api-server", "--workers", "1"]
        ports:
          - "8080:8080"
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
            interval: 30s
            timeout: 10s
            retries: 10
            start_period: 5s
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            init:
                condition: service_completed_successfully

    scheduler:
        <<: *airflow-common
        command: ["scheduler"]
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
            interval: 30s
            timeout: 10s
            retries: 10
            start_period: 30s
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            init:
                condition: service_completed_successfully

    dag-processor:
        <<: *airflow-common
        command: ["dag-processor"]
        healthcheck:
            test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
            interval: 30s
            timeout: 10s
            retries: 10
            start_period: 30s
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            init:
                condition: service_completed_successfully

    worker:
        <<: *airflow-common
        command: ["celery", "worker"]
        healthcheck:
            test:
                - "CMD-SHELL"
                - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
            interval: 30s
            timeout: 10s
            retries: 10
            start_period: 30s
        environment:
            <<: *airflow-common-env
            DUMB_INIT_SETSID: "0"
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            api-server:
                condition: service_healthy
            init:
                condition: service_completed_successfully

    triggerer:
        <<: *airflow-common
        command: ["triggerer"]
        healthcheck:
            test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
            interval: 30s
            timeout: 10s
            retries: 10
            start_period: 30s
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            init:
                condition: service_completed_successfully

    init:
        <<: *airflow-common
        entrypoint: /bin/bash
        command:
        - -c
        - |
            if [[ -z "${AIRFLOW_UID}" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
            echo "If you are on Linux, you SHOULD follow the instructions below to set "
            echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
            echo "For other operating systems you can get rid of the warning with manually created .env file:"
            echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
            echo
            fi
            one_meg=1048576
            mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
            cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
            disk_available=$$(df / | tail -1 | awk '{print $$4}')
            warning_resources="false"
            if (( mem_available < 4000 )) ; then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
            echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
            echo
            warning_resources="true"
            fi
            if (( cpus_available < 2 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
            echo "At least 2 CPUs recommended. You have $${cpus_available}"
            echo
            warning_resources="true"
            fi
            if (( disk_available < one_meg * 10 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
            echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
            echo
            warning_resources="true"
            fi
            if [[ $${warning_resources} == "true" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
            echo "Please follow the instructions to increase amount of resources available:"
            echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
            echo
            fi
            mkdir -p /opt/airflow/{logs,dags,plugins,config}
            chown -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
            
            # Remove any existing config file that might override env vars
            rm -f /opt/airflow/config/airflow.cfg
            
            exec /entrypoint airflow version
        environment:
            <<: *airflow-common-env
            _AIRFLOW_DB_MIGRATE: ${_AIRFLOW_DB_MIGRATE:-true}
            _AIRFLOW_WWW_USER_CREATE: ${_AIRFLOW_WWW_USER_CREATE:-true}
            _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
            _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
        user: "0:0"
        restart: "no"

    cli:
        <<: *airflow-common
        profiles:
            - debug
        environment:
            <<: *airflow-common-env
            CONNECTION_CHECK_MAX_COUNT: "0"
        tty: true
        stdin_open: true
        depends_on:
            <<: *airflow-common-depends-on

    flower:
        <<: *airflow-common
        command: ["celery", "flower"]
        profiles:
            - debug
        ports:
            - "5555:5555"
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s
        restart: always
        depends_on:
            <<: *airflow-common-depends-on
            init:
                condition: service_completed_successfully

networks:
    airflow-network:
        driver: bridge
        name: airflow-internal-network
    shared-db-network:
        driver: bridge
        name: shared-db-network
    shared-airflow-network:
        driver: bridge
        name: shared-airflow-network

volumes:
    postgres-db-volume: